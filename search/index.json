[{"content":"0 Hello World !! 1 hugo 1.1 create new content 1 2 3 hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt; e.g.hugo new content post/myFirstBlog/index.md 1.2 hugo server -D Start the embedded web server with the command \u0026ldquo;hugo server \u0026ndash;buildDrafts\u0026rdquo; .\n也可以使用hugo server -D\n2 git使用 2.1 将更新推送到Github远程仓库 2.1.1 第一次上传代码需要的步骤 git pull origin main：从GitHub上获取最新的更改 git add . ：增加当前目录下的所有更改（包括新文件和修改过的文件）添加到暂存区 git commit -m \u0026ldquo;change commit\u0026rdquo;：将暂存区的更改提交到你的本地仓库 -m后面是你对本次提交更改所做的简单描述 git branch -M main：用于重命名当前分支为 main。这个命令通常用于将默认分支从 master 改为 main，因为 master 这个词在某些社区中被认为是有争议的，所以很多项目和组织选择使用 main 或其他名称作为默认分支。 git remote add origin git remote add origin https://github.com/username/repository.git：是一个Git命令，用于将一个远程仓库地址添加到你的本地Git仓库中。这里的 username 应该替换成你的GitHub仓库。 git push -u origin main：用于将本地的 main 分支推送到远程仓库的 origin 仓库，如果已经配置了上游跟踪关系，并且只是想推送更改，可以简单的使用git push 2.1.2 如果是clone一个代码，并且修改后上传 git clone https://github.com/username/repository.git 切换到仓库目录 编辑代码 git add .：将所有更改添加到暂存区 git commit -m \u0026ldquo;Your commit message\u0026rdquo; git push origin main: 配置好后，后续可以直接使用git push 2.1.3 其他命令 git checkout -b pa0：这个命令创建并切换到一个名为pa0的新分支。-b参数表示创建新分支。 git checkout master：这个命令切换回master主分支。 git checkout -f main:Git将会丢弃我们未提交的修改，并强制切换到主分支(main branch)。 git fetch：git fetch 命令用于从远程仓库获取所有分支的更新，但不会自动合并到你的当前分支。 它将远程分支的最新状态下载到你的本地仓库，但不会影响你的工作目录。 你可以在 fetch 之后使用 git merge 或 git rebase 来合并这些更改到你的当前分支。 git pull：git pull 命令实际上是 git fetch 后跟 git merge 的快捷方式。 它首先获取远程分支的最新更改，然后自动尝试将这些更改合并到你当前的分支。 如果远程分支的更改与你当前分支的更改有冲突，git pull 会停止合并并让你解决这些冲突。 简单来说，git fetch 只是获取远程的更改，而 git pull 不仅获取更改，还尝试将它们合并到你的当前工作。使用 git fetch 可以让你更细致地控制合并过程，而使用 git pull 则更快捷，但可能需要解决合并时的冲突。\n","date":"2024-08-22T22:21:56+08:00","permalink":"https://yannick-995.github.io/p/study-notes/","title":"Study Notes"}]